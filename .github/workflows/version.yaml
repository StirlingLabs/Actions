name: Version

on:
  workflow_call:
    inputs:
      version:
        description: Version of this release
        type: string
        required: false
      strict:
        description: Error if the version number is invalid
        type: boolean
        default: true

    outputs:
      text:
        description: Full dotted version number (with v prefix)
        value: ${{ jobs.version.outputs.text }}
      numeric:
        description: Full dotted version number (with no v prefix)
        value: ${{ jobs.version.outputs.numeric }}
      major:
        description: Just the first number from the version
        value: ${{ jobs.version.outputs.major }}
      significant:
        description: All of the significant digits of the version number
        value: ${{ jobs.version.outputs.significant }}
      preRelease:
        description: Boolean flag, true if version is pre-release
        value: ${{ jobs.version.outputs.preRelease }}

jobs:
  version:
    name: Get Version
    runs-on: ubuntu-22.04
    outputs:
      text: v${{ steps.version.outputs.full }}
      numeric: ${{ steps.version.outputs.full }}
      major: ${{ steps.process.outputs.major }}
      significant: ${{ steps.process.outputs.significant }}
      preRelease: ${{ steps.process.outputs.preRelease }}
    steps:
      - name: Get tags
        id: tag
        if: |
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
          echo "::set-output name=v::${refName:1}"
        env:
          refName: ${{ github.ref_name }}

      - name: Get input
        id: given
        if: |
            startsWith(inputs.version, 'v')
        run: |
          echo "::set-output name=v::${input:1}"
        env:
          input: ${{ inputs.version }}

      - name: Get Version
        id: version
        if: |
            steps.given.outputs.v != '' ||
            steps.tag.outputs.v != ''
        run: |
          numericVersion=${tag}
          if [ "$given" != "" ] ; then
            if [ "$tag" != "" ] ; then
              echo "Tag/Input mismatch.  Using input ($given) not tag ($tag)."
            fi
            numericVersion=${given}
          fi
          echo "::set-output name=numeric::$numericVersion"
          echo "::set-output name=text::v$numericVersion"
          echo Core version is $numericVersion
        env:
          given: ${{ steps.given.outputs.v }}
          tag: ${{ steps.tag.outputs.v }}

      - name: Extended Processing
        id: process
        if: |
            steps.version.outputs.numeric != ''
        run: |
          preRelease=false
          arrayVersion=(${numericVersion//./ })
          majorVersion=${arrayVersion[0]}
          significantVersion=""
          dot=""
          digit=0
          re='^[0-9]+$'
          for v in "${arrayVersion[@]}" ; do
            if ! [[ "$v" =~ $re ]] ; then
              echo "Digit $digit ($v) is not entirely numeric."
              if [ digit EQU 2 ] ; then
                preFlags=(pre rc a alpha b beta)
                for flag in ${preFlags[@]} ; do
                  if [[ "$v" =~ $flag ]] ; then
                    preRelease=true
                  fi
                done
              fi
              if [ "$preRelease" != "true" ] ; then
                echo "Digit $digit ($v) is not a number (from v$numericVersion)."
                exit 1
              fi
            fi
            if (( 10#$v > 0 )) ; then
              significantVersion=$significantVersion$dot$v
              dot="."
            fi
            digit=$((digit+1))
          done
          echo Significant $significantVersion, Major $majorVersion, pre=$preRelease ... minor ${arrayVersion[1]} patch ${arrayVersion[2]} package ${arrayVersion[3]}
          echo "::set-output name=major::$majorVersion"
          echo "::set-output name=significant::$significantVersion"
          echo "::set-output name=preRelease::$preRelease"
        env:
          numericVersion: ${{ steps.version.outputs.numeric }}

      - name: Bad Version
        if: |
            inputs.strict == 'true' &&
            ( steps.version.outputs.numeric == '' ||
              steps.process.outputs.preRelease == ''
            )
        run: |
          echo "The version tag should be in the format v22.09.6, v22.09.6rc1 or similar."
          exit 1
