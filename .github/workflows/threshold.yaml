name: Threshold

on:
  workflow_call:
    outputs:
      continue:
        description: "Processing on this repo should continue"
        value: ${{ jobs.check.outputs.continue }}
      release:
        description: "This version is a release"
        value: ${{ jobs.check.outputs.release }}
      sha:
        description: "The SHA of the commit that was considered"
        value: ${{ jobs.check.outputs.sha }}
      short_sha:
        description: "The short SHA of the commit that was considered"
        value: ${{ jobs.check.outputs.short_sha }}

jobs:
  check:
    name: Run Check
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      continue: ${{ steps.collate_checks.outputs.process }}
      release: ${{ steps.released_check.outputs.release }}
      sha: ${{ steps.collate_checks.outputs.sha }}
      short_sha: ${{ steps.collate_checks.outputs.short_sha }}
    steps:
      - name: Dump GitHub context
        if: false
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Check if CI is forced
        id: force_ci_check
        if: |
          github.event_name == 'push' &&
          contains(github.event.head_commit.message, '[force ci]') ||
          contains(github.event.head_commit.message, '[force-ci]') ||
          contains(github.event.head_commit.message, '[forceci]')
        run: |
          echo "process=true" >> "$GITHUB_OUTPUT"

      - name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event_name == 'pull_request'
        env:
          process: ${{ !github.event.pull_request.draft }}
        run: |
          echo "process=$process" >> "$GITHUB_OUTPUT"

      - name: Check if this is a Release
        id: released_check
        if: |
          github.event_name == 'push' &&
          github.ref_type == 'tag' &&
          startsWith(github.ref_name, 'v')
        run: |
          echo "process=false" >> "$GITHUB_OUTPUT"
          echo "release=true" >> "$GITHUB_OUTPUT"

      - name: Check if changes pushed
        id: push_new_check
        if: |
          github.event_name == 'push' &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.process != 'true') &&
          (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.process != 'true') &&
          (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.process != 'true')
        uses: fkirc/skip-duplicate-actions@v5
        with:
          skip_after_successful_duplicate: true
          paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          concurrent_skipping: same_content
          cancel_others: true

      - name: Skipped Checks Check
        id: skipped_checks
        if: |
          steps.force_ci_check.outcome == 'skipped' &&
          steps.pr_draft_check.outcome == 'skipped' &&
          steps.released_check.outcome == 'skipped' &&
          steps.push_new_check.outcome == 'skipped'
        run: |
          echo "All checks skipped, I don't have any meaningful input, so let's skip processing."
          echo "process=false" >> "$GITHUB_OUTPUT"

      - name: Collate Checks
        id: collate_checks
        env:
          force_ci_status: ${{ steps.force_ci_check.outcome }}
          pr_draft_status: ${{ steps.pr_draft_check.outcome }}
          released_status: ${{ steps.released_check.outcome }}
          push_new_status: ${{ steps.push_new_check.outcome }}
          skipchks_status: ${{ steps.skipped_checks.outcome }}
          force_ci_output: ${{ steps.force_ci_check.outputs.process }}
          pr_draft_output: ${{ steps.pr_draft_check.outputs.process }}
          released_output: ${{ steps.released_check.outputs.process }}
          push_new_output: ${{ steps.push_new_check.outputs.should_skip }}
          skipchks_output: ${{ steps.skipped_checks.outputs.process }}
        run: |
          [[ "$force_ci_status" == "skipped" || "$force_ci_output" != "true" ]] && force_ci_result=false || force_ci_result=true 
          [[ "$pr_draft_status" == "skipped" || "$pr_draft_output" != "true" ]] && pr_draft_result=false || pr_draft_result=true
          [[ "$released_status" == "skipped" || "$released_output" != "true" ]] && released_result=false || released_result=true 
          [[ "$push_new_status" == "skipped" || "$push_new_output" != "false" ]] && push_new_result=false || push_new_result=true 
          [[ "$skipchks_status" == "skipped" || "$skipchks_output" != "true" ]] && skipchks_result=false || skipchks_result=true 

          echo "force_ci status '$force_ci_status' output '$force_ci_output' -> '$force_ci_result'"
          echo "pr_draft status '$pr_draft_status' output '$pr_draft_output' -> '$pr_draft_result'"
          echo "released status '$released_status' output '$released_output' -> '$released_result'"
          echo "push_new status '$push_new_status' output '$push_new_output' -> '$push_new_result'"
          echo "push_new status '$push_new_status' output '$push_new_checks' -> '$push_new_chekkk'"
          echo "skipchks status '$skipchks_status' output '$skipchks_output' -> '$skipchks_result'"

          # if any are true, processing should be true
          [[ "$force_ci_result $pr_draft_result $released_result $push_new_result $skipchks_result" == *"true"* ]] && process=true || process=false

          # summarise what we're doing
          if [[ "$process" == "true" ]] ; then
            [[ "$push_new_result" == "true" ]] && message="changes were pushed to the repo" 
            [[ "$pr_draft_result" == "true" ]] && message="this is an active pull request"
            [[ "$force_ci_result" == "true" ]] && message="it was forced by the commit message" 
            echo "### Processing continuing since ${message}." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "### Continued processing does not appear to be necessary." >> "$GITHUB_STEP_SUMMARY"
          fi
          # shellcheck disable=SC2129
          echo "process=$process" >> "$GITHUB_OUTPUT"
          echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
