name: Metadata

on:
  workflow_call:
    inputs:
      repo:
        description: The 'owner/repo' string of the repository to be processed
        type: string
        default: ${{ github.repository }}
      ref:
        description: The git reference of the commit to be processed
        type: string
        default: ${{ github.ref }} # perhaps ref_name & ref_type instead?
      coreName:
        description: The core (most minimal) name of the project
        type: string
        required: false
      strictVersion:
        description: Error if version not valid?
        type: boolean
        default: false

    outputs:
      project:
        description: Project name
        value: ${{ jobs.name.outputs.project }}
      coreName:
        description: Minimal project name
        value: ${{ jobs.name.outputs.core }}
      textVersion:
        description: Full version number (with v prefix)
        value: ${{ jobs.version.outputs.text }}
      numericVersion:
        description: Full version number (with no v prefix)
        value: ${{ jobs.version.outputs.numeric }}
      majorVersion:
        description: Just the first segment of the version number
        value: ${{ jobs.version.outputs.major }}
      significantVersion:
        description: All of the significant parts of the version number
        value: ${{ jobs.version.outputs.significant }}
      tripleVersion:
        description: The dotted triple that makes up traditional versioning
        value: ${{ jobs.version.outputs.triple }}
      preRelease:
        description: Boolean, true if version is pre-release
        value: ${{ jobs.meta.outputs.preRelease }}
      currentBranch:
        description: Name of the current branch of the project
        value: ${{ jobs.meta.outputs.currentBranch }}
      defaultBranch:
        description: Name of the default branch of the project
        value: ${{ jobs.meta.outputs.defaultBranch }}
      homepage:
        description: Project homepage
        value: ${{ jobs.meta.outputs.homepage }}
      description:
        description: Project description
        value: ${{ jobs.meta.outputs.description }}
      topics:
        description: Project topics in JSON array
        value: ${{ jobs.meta.outputs.topics }}
      linuxName:
        description: Versioned filename that would be given to a library for this project on Linux
        value: ${{ jobs.meta.outputs.linuxName }}
      macName:
        description: Versioned filename that would be given to a library for this project on MacOS
        value: ${{ jobs.meta.outputs.macName }}
      winName:
        description: Versioned filename that would be given to a DLL for this project on Windows
        value: ${{ jobs.meta.outputs.winName }}
      linuxBaseName:
        description: Name that would be given to a library for this project on Linux without versioning
        value: ${{ jobs.meta.outputs.linuxBaseName }}
      macBaseName:
        description: Name that would be given to a library for this project on MacOS without versioning
        value: ${{ jobs.meta.outputs.macBaseName }}
      winBaseName:
        description: Filename that would be given to a DLL for this project on Windows without versioning
        value: ${{ jobs.meta.outputs.winBaseName }}
      gitUrl:
        description: Project git URL
        value: ${{ jobs.meta.outputs.gitUrl }}
      tagsUrl:
        description: Project tags API URL
        value: ${{ jobs.meta.outputs.tagsUrl }}
      releasesUrl:
        description: Project releases API URL
        value: ${{ jobs.meta.outputs.releasesUrl }}
      short_sha:
        description: Short SHA of the commit being processed
        value: ${{ jobs.meta.outputs.short_sha }}

jobs:
  name:
    name: Determine Name
    uses: ./.github/workflows/name.yaml
    with:
      coreName: ${{ inputs.coreName }}

  version:
    name: Determine Version
    uses: ./.github/workflows/version.yaml

  meta:
    name: Metadata
    runs-on: ubuntu-latest
    needs: [ name, version ]
    outputs:
      currentBranch: ${{ steps.branch.outputs.currentBranch }}
      defaultBranch: ${{ steps.api.outputs.defaultBranch }}
      homepage: ${{ steps.url.outputs.homepage }}
      description: ${{ steps.api.outputs.description }}
      topics: ${{ steps.api.outputs.topics }}
      linuxName: lib${{ needs.name.outputs.core }}.so.${{ needs.version.outputs.significant }}
      linuxBaseName: lib${{ needs.name.outputs.core }}.so
      macName: lib${{ needs.name.outputs.core }}.${{ needs.version.outputs.significant }}.dylib
      macBaseName: lib${{ needs.name.outputs.core }}.dylib
      winName: ${{ needs.name.outputs.core }}-${{ needs.version.outputs.significant }}.dll
      winBaseName: ${{ needs.name.outputs.core }}.dll
      gitUrl: ${{ steps.url.outputs.gitUrl }}
      tagsUrl: ${{ steps.url.outputs.tagsUrl }}
      releasesUrl: ${{ steps.url.outputs.releasesUrl }}
      short_sha: ${{ steps.api.outputs.short_sha }}
      preRelease: ${{ steps.status.outputs.preRelease }}

    steps:
      - name: Debug
        if: false
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set Variables
        id: api
        env:
          repo: ${{ inputs.repo }}
          defaultBranch: ${{ github.event.repository.default_branch }}
          homepage: ${{ github.event.repository.homepage }}
          htmlUrl: ${{ github.event.repository.html_url }}
          topics: ${{ toJSON(github.event.repository.topics) }}
        run: |
          # init
          # shellcheck disable=SC2086
          url="https://api.github.com/repos/${repo}"
          echo "url is ${url}"
          echo "url=${url}" >> "$GITHUB_OUTPUT"
          json=""
          # Define function
          updateValue() {
            [[ "$1" != "" ]] && _var="$1" || exit 1
            [[ "$2" != "" ]] && _term="$2" || _term="$1"
            # if the value is an empty string or empty array
            if [[ "${!_var}" =~ ^$|\[[[:space:]]*\] ]] ; then
              [[ "$json" == "" ]] && json=$(curl -s "$url");
              # shellcheck disable=SC2162,SC2229
              read "${_var}" <<< "$(jq -r ".${_term}" <<< "$json")"
            fi
            echo "${_var} is ${!_var}"
            echo "${_var}=${!_var}" >> "$GITHUB_OUTPUT"
          }
          # Do work
          updateValue "defaultBranch" "default_branch"
          updateValue "homepage"
          updateValue "htmlUrl" "html_url"
          updateValue "gitUrl" "git_url"
          updateValue "tagsUrl" "tags_url"
          updateValue "releasesUrl" "releases_url"
          updateValue "description"
          # Update Topics
          jsonTopics=$(jq -r ".topics" <<< "$json")
          echo "Retrieved topics are $jsonTopics"
          bothTopicArrays="$topics $jsonTopics"
          topics=$(jq -s -c 'add | unique' <<< "$bothTopicArrays")
          echo "Final topics are $topics"
          echo "topics=$topics" >> "$GITHUB_OUTPUT"
          echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Get Branch
        id: branch
        env:
          defaultBranch: ${{ steps.api.outputs.defaultBranch }}
        run: |
          currentBranch="${GITHUB_REF#refs/heads/}"
          echo "Branches - current: $currentBranch - default: $defaultBranch"
          if [[ $currentBranch == refs/tags/* ]] ; then
            currentBranch="$defaultBranch"
          fi
          echo "currentBranch=${currentBranch}" >> "$GITHUB_OUTPUT"

      - name: Links
        id: url
        env:
          homepage: ${{ steps.api.outputs.homepage }}
          htmlUrl: ${{ steps.api.outputs.htmlUrl }}
          gitUrl: ${{ steps.api.outputs.gitUrl }}
          tagsUrl: ${{ steps.api.outputs.tagsUrl }}
          releasesUrl: ${{ steps.api.outputs.releasesUrl }}
        run: |
          if [ "$homepage" == "" ] ; then
            homepage="$htmlUrl"
          fi
          if [ "$homepage" == "" ] ; then
            homepage="https://stirlinglabs.com"
          fi
          # shellcheck disable=SC2129
          echo "homepage=${homepage}" >> "$GITHUB_OUTPUT"
          echo "gitUrl=${gitUrl}" >> "$GITHUB_OUTPUT"
          echo "tagsUrl=${tagsUrl}" >> "$GITHUB_OUTPUT"
          echo "releasesUrl=${releasesUrl}" >> "$GITHUB_OUTPUT"

      - name: Status
        id: status
        if: ${{ github.ref_type }} == "tag" && ${{ github.event.action }} == 'published'
        env:
          preRelease: ${{ needs.version.outputs.preRelease }} # true or false
          tag: ${{ github.ref }}
          url: ${{ steps.api.outputs.url }}
        run: |
          # If the tag is a prerelease, set the preRelease flag true, regardless of the value from version
          tag=${tag##refs/tags/}
          # Fetch releases from GitHub API
          releases=$(curl -s "$url/releases")
          # Extract the 'prerelease' field for the given tag
          prerelease_answer=$(echo "$releases" | jq --raw-output ".[] | select(.tag_name == \"$tag\") | .prerelease")          
          # Check if the tag was found and if it's a prerelease
          if [ -z "$prerelease_answer" ]; then
              echo "Tag $tag not found in releases."
              exit 1
          elif [ "$prerelease_answer" == "true" ]; then
              echo "Tag $tag is a prerelease."
              preRelease="true"
          else
              echo "Tag $tag is NOT a prerelease."
          fi
          echo "preRelease=${preRelease}" >> "$GITHUB_OUTPUT"
