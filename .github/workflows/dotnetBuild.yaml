name: .Net Build

on:
  workflow_call:
    inputs:
      project:
        description: Overall project name
        type: string
        required: false
      solution:
        description: Solution file name
        type: string
        required: false
      test:
        description: Run tests on this project?
        type: boolean
        default: true
      release:
        description: Building for release?
        type: boolean
        default: false
    outputs:
      fail:
        description: Was the build not fully successful?
        value: ${{ jobs.build.outputs.fail }}

jobs:
  meta:
    name: Get Metadata
    uses: ./.github/workflows/metadata.yaml
    with:
      coreName: ${{ inputs.project }}
      strictVersion: ${{ inputs.release }}

  build:
    name: .Net Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
          - os: macos-12
          - os: windows-2022
      fail-fast: true
    needs: [ meta ]
    defaults:
      run:
        shell: bash
    outputs:
      fail: ${{ steps.problems.outputs.fail }}
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Preflight
        id: preflight
        if: runner.os == 'Linux'
        uses: StirlingLabs/PreflightDotnetAction@main
        with:
          solution: ${{ inputs.solution }}
          gitUrl: ${{ needs.meta.outputs.gitUrl }}
          homepage: ${{ needs.meta.outputs.homepage }}
          defaultBranch: ${{ needs.meta.outputs.defaultBranch }}

      - name: NuGet Auth
        id: auth
        if: steps.preflight.outcome == 'success'
        uses: StirlingLabs/GithubNugetAuthAction@main

      - name: Restore
        id: restore
        if: steps.auth.outcome == 'success'
        env:
          solution: ${{ steps.preflight.outputs.solution }}
        run: |
          dotnet restore "$solution"

      - name: Build
        id: build
        if: steps.restore.outcome == 'success'
        run: |
          dotnet build "$solution" --configuration Release --no-restore
        env:
          solution: ${{ steps.preflight.outputs.solution }}
          release: ${{ inputs.release }}
          version: ${{ needs.meta.outputs.numericVersion }}
          runNumber: ${{ github.run_id }}

      - name: Test
        id: test
        if: |
          steps.build.outcome == 'success' && 
          inputs.test == 'true'
        env:
          solution: ${{ steps.preflight.outputs.solution }}
          coverlet: ${{ steps.preflight.outputs.msbuildCoverlet }}
          logger: ${{ steps.preflight.outputs.githubLogger }}
        run: |
          [[ "$covertlet" == "true" ]] && coverOptions="--collect:\"XPlat Code Coverage\"" || coverOptions=""
          [[ "$logger" == "true" ]] && loggerOptions="--logger GitHubActions" || loggerOptions=""
          dotnet test "\"$solution\" --no-build --no-restore --configuration Release $coverOptions $loggerOptions"

      - name: Upload Artifacts
        id: upload
        if: |
          steps.test.outcome == 'success' &&
          runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.meta.outputs.project }}
          path: |
            artifacts/*.nupkg
          if-no-files-found: error

      - name: Save coverage to PR
        id: coverage-pr
        if: |
          steps.build.outcome == 'success' &&
          inputs.test == 'true' &&
          github.event_name == 'pull_request' &&
          runner.os == 'Linux'
        uses: StirlingLabs/PROutputAction@v1.0.1
        with:
          sources: '.github/coverage/prefix,coverage/,.github/coverage/suffix'
          token: ${{github.token}}
          comment: |
            Coverage

      - name: Save coverage to storage branch
        id: coverage-branch
        if: |
          steps.build.outcome == 'success' &&
          github.event_name == 'push' &&
          runner.os == 'Linux'
        uses: StirlingLabs/BranchStorageAction@v21.07.3
        with:
          comment: |
            Coverage for ${{github.ref}}
            Action: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
            Commit: https://github.com/${{github.repository}}/commit/${{github.sha}}
          storage-branch: coverage
          src: coverage
          dst: coverage
          prune: true

      - name: Clean
        id: clean
        if: steps.build.outcome == 'success'
        run: |
          dotnet clean "$sln"
          rm -rf ./**/{bin,obj}/**
        env:
          sln: ${{ steps.preflight.outputs.solution }}

      - name: Test NuPkgs
        id: test-nupkg
        if: |
          steps.clean.outcome == 'success' &&
          inputs.test == 'true' && 
          inputs.release == 'true'
        env:
          testProject: ${{ needs.meta.outputs.project }}.Tests
          logger: ${{ steps.preflight.outputs.githubLogger }}
        run: |
          if [ -d "$testProject" ]; then
            dotnet restore "$testProject" -p:Configuration=Release -p:UseBuiltNuPkg=True
            dotnet build "$testProject" --configuration Release --no-restore -p:UseBuiltNuPkg=True
            [[ "$logger" == "true" ]] && loggerOptions="--logger GitHubActions" || loggerOptions=""
            #shellcheck disable=SC2086
            dotnet test "$testProject" --configuration Release --no-restore --no-build $loggerOptions -p:UseBuiltNuPkg=True
          else
            echo "Tests not found at $testProject"
            ls ./*.Tests
            exit 1
          fi

      - name: Problems?
        id: problems
        if: steps.test.outcome != 'success'
        env:
          outcome: ${{ steps.test.outcome }}
        run: |
          echo -e "Outcome is \"$outcome\""
          [[ "$outcome" == "success" ]] && fail="false" || fail="true"
          echo "fail=$fail" >> "$GITHUB_OUTPUTS"

      - name: Summary
        id: summary
        env:
          release: ${{ inputs.release }}
          test: ${{ inputs.test }}
          version: ${{ needs.meta.outputs.textVersion }}
          project: ${{ needs.meta.outputs.project }}
          event: ${{ github.event_name }}
          fail: ${{ steps.problems.outputs.fail }}
          buildOutcome: ${{ steps.build.outcome }}
          testOutcome: ${{ steps.test.outcome }}
          nupkgTestOutcome: ${{ steps.test-nupkg.outcome }}
        run: |
          # shellcheck disable=2086,2129
          [[ "$fail" == "true" ]] && status="encountered problems" || status="successfully completed"
          echo "### $RUNNER_OS $status" >> "$GITHUB_STEP_SUMMARY"
          [[ "$release" == "true" ]] && echo "- Built & tested for release" >> "$GITHUB_STEP_SUMMARY"
          [[ "$buildOutcome" == "success" ]] && buildStatus="sucessfully" || buildStatus="with problems"
          echo "- Project built $buildStatus" >> "$GITHUB_STEP_SUMMARY"
          if [[ "$test" == "true" ]] ; then
            [[ "$testOutcome" == "success" ]] && testStatus="sucessfully" || testStatus="with problems"
            echo "- Unit tests completed $testStatus" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Unit tests were skipped" >> "$GITHUB_STEP_SUMMARY"
          fi
          [[ "$nupkgTestOutcome" == "success" ]] && nupkgTestStatus="sucessfully" || nupkgTestStatus="with problems"
          [[ "$release" == "true" ]] && echo "- NuPkgs were tested $nupkgTestStatus" >> "$GITHUB_STEP_SUMMARY"
          storageText="dropped on the floor, I don't know what to do with an $event event"
          [[ "$event" == "pull_request" ]] && storageText="updated in the PR" 
          [[ "$event" == "push" ]] && storageText="recorded in the \`storage\` branch"
          echo "- Test coverage was $storageText" >> "$GITHUB_STEP_SUMMARY"
