name: .Net Build

on:
  workflow_call:
    inputs:
      project:
        description: Overall project name
        type: string
        required: false
      solution:
        description: Solution file name
        type: string
        required: false
      library:
        description: Does this project build a library, or an executable?
        type: boolean
        default: true
      strictPreflight:
        description: Fail if preflight checks fail?
        type: boolean
        default: true
      test:
        description: Run tests on this project?
        type: boolean
        default: true
      release:
        description: Building for release?
        type: boolean
        default: false
    outputs:
      fail:
        description: Was the build not fully successful?
        value: ${{ jobs.build.outputs.fail }}
      solution:
        description: Solution file name
        value: ${{ jobs.build.outputs.solution }}

jobs:
  meta:
    name: Get Metadata
    uses: ./.github/workflows/metadata.yaml
    with:
      coreName: ${{ inputs.project }}
      strictVersion: ${{ inputs.release }}

  build:
    name: .Net Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
          - os: macos-12
          - os: windows-2022
      fail-fast: true
    needs: [ meta ]
    defaults:
      run:
        shell: bash
    outputs:
      fail: ${{ steps.summary.outputs.failed }}
      solution: ${{ steps.solution.outputs.solution }}
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Preflight
        id: preflight
        if: false && runner.os == 'Linux' # Turned off until Preflight is working
        uses: StirlingLabs/PreflightDotnetAction@main
        with:
          solution: ${{ inputs.solution }}
          library: ${{ inputs.library }}
          homepage: ${{ needs.meta.outputs.homepage }}
          strict: ${{ inputs.strictPreflight }}
          verbose: true

      - name: Solution
        id: solution
        env:
          solution: ${{ inputs.solution }}
          preflight_solution: ${{ steps.preflight.outputs.solution }}
        run: |
          # Find Solution
          main() {
            echo -e "Finding solution, initially set to: \'$solution\'"
            [[ "$solution" != *".sln" ]] && solution="${solution}.sln"
            if ! checkSolution "$solution" && ! checkSolution "$preflight_solution" ; then
              if ! count="$(echo "$solution" | grep ".sln" --count --only-matching)" ; then
                fail "Problem counting solutions: $count"
              elif [[ "$count" -ne 1 ]] ; then
                fail "${count} solutions found!\nIf a single solution file is not in the root directory, specify _one_ with the \`solution\` input.\n$solution"
              fi
              if ! solution="$(find . -name '*.sln')" ; then
                fail "Problem finding solution: $solution"
              elif ! checkSolution "$solution" ; then
                fail "Unable to find any solution in...\n$(ls -l)"
              fi
            fi
            echo "Done."
          }

          function checkSolution() {
            local file="$1"
            if [[ -f "$file" ]] ; then
              echo "Solution found: \`$file\`"
              echo "solution=$file" >> "$GITHUB_OUTPUT"
              echo "### Processing $file on $RUNNER_OS" >> "$GITHUB_STEP_SUMMARY"
              return 0
            fi
            return 1
          }

          function fail {
            echo -e "‼️ Error: $1" >&2 ## Send message to stderr.
            echo -e "### ❌ Error ❌\n$1" >> "$GITHUB_STEP_SUMMARY"
            exit "${2-1}" ## Exit code specified by $2, or 1 by default.
          }    
          main "$@" ; exit

      - name: NuGet Auth
        id: auth
        if: steps.preflight.outcome == 'success' || steps.solution.outcome == 'success'
        uses: StirlingLabs/GithubNugetAuthAction@main

      - name: Restore
        id: restore
        if: steps.auth.outcome == 'success'
        env:
          solution: ${{ steps.solution.outputs.solution }}
        run: |
          if dotnet restore "$solution" ; then
            echo -n "✅ Restored " >> "$GITHUB_STEP_SUMMARY"
          else
            echo -n "❌ Failed to restore " >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

      - name: Build
        id: build
        if: steps.restore.outcome == 'success'
        run: |
          echo "Building $solution"
          if dotnet build "$solution" --configuration Release --no-restore ; then
            echo -n "✅ Built " >> "$GITHUB_STEP_SUMMARY"
          else
            echo -n "❌ Failed to build " >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
        env:
          solution: ${{ steps.solution.outputs.solution }}
          release: ${{ inputs.release }}
          version: ${{ needs.meta.outputs.numericVersion }}
          runNumber: ${{ github.run_id }}

      - name: Test
        id: test
        env:
          buildOutcome: ${{ steps.build.outcome }}
          solution: ${{ steps.solution.outputs.solution }}
          test: ${{ inputs.test }}
        run: |
          if [[ "$test" == "true" ]] && [[ "$buildOutcome" == "success" ]] ; then
            echo "Testing $solution"
            if dotnet test "$solution" --no-build --no-restore --configuration Release --collect:"XPlat Code Coverage" --logger GitHubActions ; then
              echo "✅ Tested " >> "$GITHUB_STEP_SUMMARY"
              echo "continue=true" >> "$GITHUB_OUTPUT"
            else
              echo "❌ Failed testing " >> "$GITHUB_STEP_SUMMARY"
              exit 1
            fi
          else
            echo "Skipping tests.  buildOutcome: $buildOutcome, test: $test"
            echo "❌ Skipped testing " >> "$GITHUB_STEP_SUMMARY"
          fi
  
      - name: Upload Library
        id: upload_library
        if: inputs.library == 'true' && steps.test.outputs.continue == 'true' && runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.meta.outputs.project }}
          path: artifacts/*.nupkg
          if-no-files-found: error

      - name: Upload Executable
        id: upload_executable
        if: inputs.library != 'true' && steps.test.outputs.continue == 'true' && runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.meta.outputs.project }}
          path: artifacts/*
          if-no-files-found: error

      - name: Save coverage to PR
        id: coverage-pr
        if: |
          steps.build.outcome == 'success' &&
          inputs.test == 'true' &&
          github.event_name == 'pull_request' &&
          runner.os == 'Linux'
        uses: StirlingLabs/PROutputAction@v1.0.1
        with:
          sources: '.github/coverage/prefix,coverage/,.github/coverage/suffix'
          token: ${{github.token}}

      - name: Save coverage to storage branch
        id: coverage-branch
        if: |
          steps.build.outcome == 'success' &&
          github.event_name == 'push' &&
          runner.os == 'Linux'
        uses: StirlingLabs/BranchStorageAction@v21.07.3
        with:
          comment: |
            Coverage for ${{github.ref}}
            Action: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
            Commit: https://github.com/${{github.repository}}/commit/${{github.sha}}
          storage-branch: coverage
          src: coverage
          dst: coverage
          prune: true

      - name: Clean
        id: clean
        if: steps.build.outcome == 'success'
        run: |
          if dotnet clean "$sln" -c Release && rm -rf ./**/{bin,obj}/** ; then
            echo "✅ Cleaned " >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Failed to clean " >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
        env:
          sln: ${{ steps.solution.outputs.solution }}

      - name: Test NuPkgs
        id: test-nupkg
        if: |
          inputs.library == 'true' &&
          steps.clean.outcome == 'success' &&
          inputs.test == 'true' && 
          inputs.release == 'true'
        env:
          testProject: ${{ needs.meta.outputs.project }}.Tests
        run: |
          if [ ! -d "$testProject" ]; then
            echo "Tests not found at $testProject"
            ls ./*.Tests
            exit 1
          fi
          if dotnet restore "$testProject" -p:Configuration=Release -p:UseBuiltNuPkg=True ; then
            echo "✅ Restored $testProject from NuPkg"
          else
            echo "❌ Failed to restore $testProject from NuPkg"
          fi
          if dotnet build "$testProject" --configuration Release --no-restore -p:UseBuiltNuPkg=True ; then
            echo "✅ Built $testProject from NuPkg"
          else
            echo "❌ Failed to build $testProject from NuPkg"
          fi
          if dotnet test "$testProject" --configuration Release loggerOptions="--logger GitHubActions" --no-restore --no-build -p:UseBuiltNuPkg=True ; then
            echo "✅ Tested $testProject from NuPkg"
            echo "✅ Tested from NuPkg" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Failed testing $testProject from NuPkg"
            echo "❌ Failed to test from NuPkg" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Summary
        id: summary
        env:
          solutionOutcome: ${{ steps.solution.outcome }}
          authOutcome: ${{ steps.auth.outcome }}
          restoreOutcome: ${{ steps.restore.outcome }}
          buildOutcome: ${{ steps.build.outcome }}
          cleanOutcome: ${{ steps.clean.outcome }}
          release: ${{ inputs.release }}
          test: ${{ inputs.test }}
          testOutcome: ${{ steps.test.outcome }}
          library: ${{ inputs.library }}
          nupkgTestOutcome: ${{ steps.test-nupkg.outcome }}
          uploadLibraryOutcome: ${{ steps.upload_library.outcome }}
          uploadExecutableOutcome: ${{ steps.upload_executable.outcome }}
          event: ${{ github.event_name }}
          coveragePrOutcome: ${{ steps.coverage-pr.outcome }}
          coverageBranchOutcome: ${{ steps.coverage-branch.outcome }}
        run: |
          [[ "$solutionOutcome" == "success" ]] && failed=false || failed="true"
          [[ "$authOutcome" == "success" ]] || failed="true"
          [[ "$restoreOutcome" == "success" ]] || failed="true"
          [[ "$buildOutcome" == "success" ]] || failed="true"
          [[ "$cleanOutcome" == "success" ]] || failed="true"
          if [[ "$testOutcome" != "success" ]] ; then
            echo "‼️ Unit tests failed or were not run. test=$test, release=$release, outcome=$testOutcome"
            echo "‼️ Unit tests $testOutcome" >> "$GITHUB_STEP_SUMMARY"
            [[ "$test" == "true" ]] || failed="true"
          fi
          if [[ "$nupkgTestOutcome" != "success" ]] ; then
            echo "‼️ NuPkg tests failed or were not run. test=$test, release=$release, outcome=$nupkgTestOutcome"
            echo "‼️ NuPkg tests $nupkgTestOutcome" >> "$GITHUB_STEP_SUMMARY"
            [[ "$test" == "true" ]] && [[ "$release" == "true" ]] || failed="true"
          fi
          if [[ "$RUNNER_OS" == "Linux" ]] ; then
            if [[ "$uploadLibraryOutcome" != "success" ]] && [[ "$uploadExecutableOutcome" != "success" ]]; then
              echo "‼️ Upload failed or was not run. library=$library, outcome=${uploadLibraryOutcome}/${uploadExecutableOutcome}"
              echo "‼️ Upload ${uploadLibraryOutcome}/${uploadExecutableOutcome}" >> "$GITHUB_STEP_SUMMARY"
              failed="true"
            fi
            if [[ "$coveragePrOutcome" != "success" ]] && [[ "$coverageBranchOutcome" != "success" ]] ; then
              echo "‼️ Coverage failed or was not run. event=$event, outcome=${coveragePrOutcome}/${coverageBranchOutcome}"
              echo "‼️ Coverage ${coveragePrOutcome}/${coverageBranchOutcome}" >> "$GITHUB_STEP_SUMMARY"
              failed="true"
            fi
          fi
          echo "failed=$failed" >> "$GITHUB_OUTPUT"
