name: .Net Build

on:
  workflow_call:
    inputs:
      project:
        description: Overall project name
        type: string
        required: false
      solution:
        description: Solution file name
        type: string
        required: false
      test:
        description: Run tests on this project?
        type: boolean
        default: true
      release:
        description: Building for release?
        type: boolean
        default: false

jobs:
  meta:
    name: Get Metadata
    uses: ./.github/workflows/metadata.yaml
    with:
      coreName: ${{ inputs.project }}
      strictVersion: ${{ inputs.release }}

  build:
    name: .Net Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
          - os: macos-12
          - os: windows-2022
      fail-fast: true
    needs: [ meta ]
    defaults:
      run:
        shell: bash
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Preflight
        id: preflight
        if: runner.os == 'Linux'
        uses: StirlingLabs/PreflightDotnetAction@main
        with:
          coreName: ${{ needs.meta.outputs.coreName }}
          solution: ${{ inputs.solution }}
          gitUrl: ${{ needs.meta.outputs.gitUrl }}
          homepage: ${{ needs.meta.outputs.homepage }}
          defaultBranch: ${{ needs.meta.outputs.defaultBranch }}


      - name: NuGet Auth
        uses: StirlingLabs/GithubNugetAuthAction@main

      - name: Restore
        env:
          solution: ${{ steps.preflight.outputs.solution }}
        run: |
          dotnet restore "$solution"

      - name: Build
        run: |
          dotnet build "$solution" --configuration Release --no-restore
        env:
          solution: ${{ steps.preflight.outputs.solution }}
          release: ${{ inputs.release }}
          version: ${{ needs.meta.outputs.numericVersion }}
          runNumber: ${{ github.run_id }}

      - name: Test
        if: inputs.test == 'true'
        run: dotnet test ${{ steps.preflight.outputs.solution }} --no-build --no-restore --configuration Release --logger GitHubActions

      - name: Upload Artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.meta.outputs.project }}
          path: |
            artifacts/*.nupkg
          if-no-files-found: error

      - name: Save coverage to PR
        if: |
          inputs.test == 'true' &&
          github.event_name == 'pull_request' &&
          runner.os == 'Linux'
        uses: StirlingLabs/PROutputAction@v1.0.1
        with:
          sources: '.github/coverage/prefix,coverage/,.github/coverage/suffix'
          token: ${{github.token}}
          comment: |

      - name: Save coverage to storage branch
        if: |
          github.event_name == 'push' &&
          runner.os == 'Linux'
        uses: StirlingLabs/BranchStorageAction@v21.07.3
        with:
          comment: |
            Coverage for ${{github.ref}}
            Action: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
            Commit: https://github.com/${{github.repository}}/commit/${{github.sha}}
          storage-branch: coverage
          src: coverage
          dst: coverage
          prune: true

      - name: Clean
        run: |
          dotnet clean "$sln"
          rm -rf ./**/{bin,obj}/**
        env:
          sln: ${{ steps.preflight.outputs.solution }}

      - name: Test NuPkgs
        if: inputs.test == 'true' && inputs.release == 'true'
        run: |
          if [ -d "$testProject" ]; then
            dotnet restore "$testProject" -p:Configuration=Release -p:UseBuiltNuPkg=True
            dotnet build "$testProject" --configuration Release --no-restore -p:UseBuiltNuPkg=True
            dotnet test "$testProject" --configuration Release --no-restore --no-build --logger GitHubActions -p:UseBuiltNuPkg=True
          else
            echo "Tests not found at $testProject"
            ls ./*.Tests
            exit 1
          fi
        env:
          testProject: ${{ needs.meta.outputs.project }}.Tests

      - name: Summary
        id: summary
        env:
          release: ${{ inputs.release }}
          test: ${{ inputs.test }}
          version: ${{ needs.meta.outputs.textVersion }}
          project: ${{ needs.meta.outputs.project }}
          event: ${{ github.event_name }}
        run: |
          [[ "$release" == "true" ]] && headline="Ready for Release" || headline="Built & tested"
          # shellcheck disable=2086,2129
          echo "### $headline on $RUNNER_OS" >> "$GITHUB_STEP_SUMMARY"
          echo "- Project built sucessfully" >> "$GITHUB_STEP_SUMMARY"
          if [[ "$test" == "true" ]] ; then
            echo "- Unit tests completed sucessfully" >> "$GITHUB_STEP_SUMMARY"
            [[ "$release" == "true" ]] && echo "- NuPkgs were tested successfully" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Unit tests were skipped" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [[ "$event" == "pull_request" ]] ; then
            echo "- Test coverage was updated in the PR" >> "$GITHUB_STEP_SUMMARY"
          elif [[ "$event" == "push" ]] ; then
            echo "- Test coverage was recorded in the \`storage\` branch" >> "$GITHUB_STEP_SUMMARY"
          fi
