name: NuPkg Release Check

on:
  workflow_call:
    inputs:
      upstream:
        description: Project owner/name (like GitHub repo URL)
        type: string
        required: false
        default: ${{ github.repository }}
      rids:
        description: Runtime identifiers for the platforms to test in a simple list (space separated)
        type: string
        required: true
      releasePrefix:
        description: Irrelevant prefix to ignore before the release version number (e.g. 'v')
        type: string
        required: false
      ignoreReleases:
        description: Simple list of version numbers to ignore (space separated)
        type: string
        required: false
      nupkgName:
        description: The package name to test (with the text 'RID' in place of the RID), e.g. StirlingLabs.project.RID.suffix
        type: string
        required: true

    outputs:
      releasesNeeded:
        description: JSON array of the version numbers that do not have all of the required packages (i.e. one for each RID)
        value: ${{ jobs.check.outputs.releasesNeeded }}
      continue:
        description: Boolean value; true if there are releases needed
        value: ${{ jobs.check.outputs.continue }}
      releasesUrl:
        description: GitHub releases URL
        value: ${{ jobs.check.outputs.releasesUrl }}
      tagsUrl:
        description: GitHub tags URL
        value: ${{ jobs.check.outputs.tagsUrl }}
      gitUrl:
        description: GitHub project git URL
        value: ${{ jobs.check.outputs.gitUrl }}
      platformArray:
        description: Platform identifiers of the platforms required in a JSON array
        value: ${{ jobs.check.outputs.platformArray }}
      ridArray:
        description: Runtime identifiers of the platforms tested in a JSON array
        value: ${{ jobs.check.outputs.ridArray }}
      rids:
        description: Runtime identifiers of the platforms tested in a simple list (space separated) provided as input
        value: ${{ inputs.rids }}
      upstream:
        description:  Project owner/name (like GitHub repo URL) provided as input
        value: ${{ inputs.upstream }}
      releasePrefix:
        description: Irrelevant prefix to ignore before the release version number (e.g. 'v') provided as input
        value: ${{ inputs.releasePrefix }}

jobs:
  check:
    name: Status
    runs-on: ubuntu-22.04
    outputs:
      upstream: ${{ inputs.upstream }}
      releasesNeeded: ${{ steps.test.outputs.releasesNeeded }}
      continue: ${{ steps.test.outputs.continue }}
      releasesUrl: ${{ steps.test.outputs.releasesUrl }}
      tagsUrl: ${{ steps.test.outputs.tagsUrl }}
      gitUrl: ${{ steps.test.outputs.gitUrl }}
      rids: ${{ steps.test.outputs.rids }}
      ridArray: ${{ steps.test.outputs.ridArray }}
      platformArray: ${{ steps.test.outputs.platformArray }}
    steps:
      - name: Check API
        id: test
        shell: bash
        env:
          upstream: ${{ inputs.upstream }}
          rids: ${{ inputs.rids }}
          releasePrefix: ${{ inputs.releasePrefix }}
          ignoreReleases: ${{ inputs.ignoreReleases }}
          nupkgName: ${{ inputs.nupkgName }}
        run: |
          # GitHub info
          releasesUrl="https://api.github.com/repos/${upstream}/releases"
          # Make these URLs available for other scripts
          # shellcheck disable=2129
          echo "releasesUrl=${releasesUrl}" >> "$GITHUB_OUTPUT"
          echo "tagsUrl=https://api.github.com/repos/${upstream}/tags" >> "$GITHUB_OUTPUT"
          echo "gitUrl=git://github.com/${upstream}.git" >> "$GITHUB_OUTPUT"
          # Get release data
          releasesJson="$(jq -c . <<< "$(curl -s "${releasesUrl}")")"
          releaseList="$(jq -r ".[].tag_name" <<< "$releasesJson")"
          echo -e "release list:\n${releaseList}\n"
          # NuGet info
          declare -A packageList
          for rid in $rids ; do
            nupkg="${nupkgName/.RID./".${rid}."}"
            packagesUrl="https://api.nuget.org/v3-flatcontainer/${nupkg}/index.json"
            ridPackageList="$(jq -r ".versions|sort|to_entries[]|(.value)" <<< "$(curl -s "${packagesUrl}")")"
            platform="${rid//-/_}"
            packageList[$platform]="$ridPackageList"
            echo "${rid}/${rid//-/_}: $(xargs <<< "$ridPackageList")"
          done
          #
          # Get a list of upstream releases that do not have all of the required packages
          continue=""
          releasesNeeded=""
          space=""
          mapfile -t releaseArray <<< "$releaseList"
          for release in "${releaseArray[@]}" ; do
            echo "Checking $release"
            # Skip exceptions due to upstream peculiarities (not in list and major version > 2)
            digits=${release#"$releasePrefix"}
            if [[ "$ignoreReleases" != *"$digits"* ]] && [[ ${digits%%.*} -ge 2 ]] ; then
              # If the package is valid, consider it
              packageExists=""
              echo "v$digits testing $rids"
              for rid in $rids ; do
                if [[ "$packageExists" != "false" ]] ; then
                  platform="${rid//-/_}"
                  ridPackageList="${packageList[$platform]}"
                  [[ "$ridPackageList" == *"${digits}"* ]] && packageExists="true" || packageExists="false"
                  [[ "$packageExists" == "true" ]] && exists="exists" || exists="NOT FOUND"
                  echo "${platform} v$digits $exists in $(xargs <<< "$ridPackageList")"
                fi
              done
              if [[ "$packageExists" == "false" ]] ; then
                continue="true"
                releasesNeeded="${releasesNeeded}${space}\"${release}\""
                space=", "
              fi
            fi
          done
          echo "Continue... $continue"
          if [ "$continue" == "true" ] ; then
            ridArray="[ "
            platformArray="[ "
            comma=""
            for rid in $rids ; do
              ridArray="${ridArray}${comma}\"${rid}\""
              case "$rid" in
                "win"*) platformArray="${platformArray}${comma}windows-latest" ;;
                "linux"*) platformArray="${platformArray}${comma}ubuntu-latest" ;;
                "osx"*) platformArray="${platformArray}${comma}macos-latest" ;;
                *) echo "Unknown RID $rid." && exit 1 ;;
              esac
              comma=", "
            done
            ridArray="${ridArray} ]"
            platformArray="${platformArray} ]"
          fi
          #shellcheck disable=2129
          echo "ridArray=$ridArray" >> "$GITHUB_OUTPUT"
          echo "platformArray=$platformArray" >> "$GITHUB_OUTPUT"
          echo "continue=$continue" >> "$GITHUB_OUTPUT"
          echo -e "releases needed:\n${releasesNeeded}"
          echo "releasesNeeded=[ ${releasesNeeded} ]" >> "$GITHUB_OUTPUT"
