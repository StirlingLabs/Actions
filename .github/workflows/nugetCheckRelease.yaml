name: NuPkg Release Check

on:
  workflow_call:
    inputs:
      upstream:
        description: Project owner/name (the path part of a GitHub repo URL)
        type: string
        required: false
        default: ${{ github.repository }}
      rids:
        description: Runtime identifiers for the platforms to test in a simple list (space separated)
        type: string
        default: 'linux-x64 osx win-x64'
      releasePrefix:
        description: Irrelevant prefix to ignore before the release version number (e.g. 'v')
        type: string
        required: false
      ignoreReleases:
        description: Simple list of version numbers to ignore (space separated)
        type: string
        required: false
      nupkgName:
        description: The package name to test (with the text 'RID' in place of the RID), e.g. StirlingLabs.project.RID.suffix
        type: string
        required: true
      forceVersion:
        description: Force a specific version number to be tested & released
        type: string
        required: false

    outputs:
      releasesNeeded:
        description: JSON array of the version numbers that do not have all of the required packages (i.e. one for each RID) (deprecated, use releases_needed_json instead)
        value: ${{ jobs.check.outputs.releases_needed_json }}
      releases_needed_json:
        description: JSON array of the version numbers that do not have all of the required packages (i.e. one for each RID)
        value: ${{ jobs.check.outputs.releases_needed_json }}
      continue:
        description: Boolean value; true if there are releases needed
        value: ${{ jobs.check.outputs.continue }}
      githubApiUrl:
        description: GitHub API base URL for the repo
        value: ${{ jobs.check.outputs.githubApi }}
      releasesUrl:
        description: GitHub API URL to list all releases for the repo
        value: ${{ jobs.check.outputs.releasesUrl }}
      tagsUrl:
        description: GitHub API URL to list all tags for the repo
        value: ${{ jobs.check.outputs.tagsUrl }}
      tagUrl:
        description: GitHub API URL to list details of a specific tag in the repo (append the tag name)
        value: ${{ jobs.check.outputs.tagUrl }}
      gitUrl:
        description: GitHub project git URL
        value: ${{ jobs.check.outputs.gitUrl }}
      platformArray:
        description: Platform identifiers of the platforms required in a JSON array
        value: ${{ jobs.check.outputs.platformArray }}
      ridArray:
        description: Runtime identifiers of the platforms tested in a JSON array
        value: ${{ jobs.check.outputs.ridArray }}
      rids:
        description: Runtime identifiers from input in a simple list
        value: ${{ inputs.rids }}
      upstream:
        description:  Project owner/name (like GitHub repo URL) provided as input
        value: ${{ inputs.upstream }}
      releasePrefix:
        description: Irrelevant prefix to ignore before the release version number (e.g. 'v') provided as input
        value: ${{ inputs.releasePrefix }}

jobs:
  check:
    name: Status
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      releases_needed_json: ${{ steps.requirements.outputs.releases_needed_json }}
      continue: ${{ steps.requirements.outputs.continue }}
      githubApi: ${{ steps.github.outputs.githubApi }}
      releasesUrl: ${{ steps.github.outputs.releasesUrl }}
      tagsUrl: ${{ steps.github.outputs.tagsUrl }}
      tagUrl: ${{ steps.github.outputs.tagUrl }}
      gitUrl: ${{ steps.github.outputs.gitUrl }}
      ridArray: ${{ steps.arrays.outputs.ridArray }}
      platformArray: ${{ steps.arrays.outputs.platformArray }}
    steps:
      - name: GitHub Release List
        id: github
        env:
          upstream: ${{ inputs.upstream }}
          releasePrefix: ${{ inputs.releasePrefix }}
          ignoreReleases: ${{ inputs.ignoreReleases }}
          forceVersion: ${{ inputs.forceVersion }}
        run: |
          # GitHub info
          releasesUrl="https://api.github.com/repos/${upstream}/releases"
          # Make these URLs available for other scripts
          #shellcheck disable=SC2129
          echo "releasesUrl=${releasesUrl}" >> "$GITHUB_OUTPUT"
          echo "githubApi=https://api.github.com/repos/${upstream}" >> "$GITHUB_OUTPUT"
          echo "tagsUrl=https://api.github.com/repos/${upstream}/tags" >> "$GITHUB_OUTPUT"
          echo "tagUrl=https://api.github.com/repos/${upstream}/git/ref/tags/" >> "$GITHUB_OUTPUT"
          echo "gitUrl=git://github.com/${upstream}.git" >> "$GITHUB_OUTPUT"
          if [[ "$forceVersion" != "" ]] ; then
            echo "‼️ Forcing version ${forceVersion}"
            echo "validReleaseList=\"${forceVersion}\"" >> "$GITHUB_OUTPUT"
            echo "continue=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Get release data
          if ! json="$(curl -s "${releasesUrl}")" ; then
            echo -e "Failed to get release data from $releasesUrl:\n$json"
            #exit 1
          fi
          if ! releasesJson="$(jq -c . <<< "$json")" ; then
            echo -e "Failed to parse json from $releasesUrl:\n$releasesJson\njson:\n$json"
            #exit 1
          fi
          if ! releaseList="$(jq -r ".[].tag_name" <<< "$releasesJson")" ; then
            echo -e "Failed to parse releaseList from releasesJson:\n$releaseList\nreleasesJson:\n$releasesJson"
            #exit 1
          fi
          echo "releases:"
          mapfile -t releaseArray <<< "$releaseList"
          validReleaseList="[ " && validReleaseListComma=""
          for release in "${releaseArray[@]}" ; do
            # Skip releases in the ignore list
            version=${release#"$releasePrefix"}
            #echo "- Checking ${release} == ${version}"
            if [[ "${ignoreReleases}" != *"\"${version}\""* ]] && \
               [[ "${ignoreReleases}" != *" ${version} "* ]] && \
               [[ "${ignoreReleases}" != *"\"${release}\""* ]] && \
               [[ "${ignoreReleases}" != *" ${release} "* ]]
            then
              validReleaseList="${validReleaseList}${validReleaseListComma}\"${version}\""
              validReleaseListComma=", "
              echo "- ${release} added"
            else
              echo "- ${release} ignored"
            fi
          done
          validReleaseList="${validReleaseList} ]"
          if echo "$validReleaseList" | jq -c '[.[]]' ; then
            echo "continue=true" >> "$GITHUB_OUTPUT"
          else
            echo "continue=false" >> "$GITHUB_OUTPUT"
          fi
          echo "release_json=${validReleaseList}" >> "$GITHUB_OUTPUT"

      - name: NuGet Package List
        id: nuget
        if: ${{ steps.github.outputs.continue == 'true' }}
        env:
          rids: ${{ inputs.rids }}
          nupkgName: ${{ inputs.nupkgName }}
        run: |
          # Gather NuGet release info
          main() {
            declare -ag common=()
            if [[ "$nupkgName" == *".RID."* ]] && [[ "$rids" != "" ]] ; then
              # Check if all RIDs have packages for each version
              echo "RID-specific NuGet package $nupkgName -> $rids"
              # Get the list of versions for each RID
              mapfile -t -d ' ' rids <<< "$rids"
              i=0 
              for rid in "${rids[@]}" ; do
                nupkg="${nupkgName/.RID./".${rid//[$'\t\r\n ']}."}"
                echo "${i}. Getting list for $nupkg"
                versionJson="$(getPackageVersionJson "$nupkg")"
                echo "NuGet has: ${versionJson}"
                
                if ! var="$( jq -r '.[]' <<< "$versionJson" )" ; then
                  echo "Error: Failed to convert \`$versionJson\` into bash array: $var"
                  #exit 1
                fi
                mapfile -t "versionList${i}" <<< "${var[*]}"
                i=$((i+1))
              done
              # Compare the lists
              findCommonElements "versionList"
              pkgVersionJson="$( jsonifyArray "${common[*]}" )"  
            else
              echo "Getting list for $nupkgName"
              pkgVersionJson="$(getPackageVersionJson "$nupkgName")"
            fi
            if ! out="$( echo "$pkgVersionJson" | jq -r '[.[]]' )" ; then
              echo "Error: Failed to convert \`$pkgVersionJson\` into bash array: $out"
              echo "continue=false" >> "$GITHUB_OUTPUT"
            else
              echo "continue=true" >> "$GITHUB_OUTPUT"
            fi
            echo "json=${pkgVersionJson}"
            echo "version_json=${pkgVersionJson}" >> "$GITHUB_OUTPUT"
          }
          
          function getPackageVersionJson() {
            local pkg="$1" ; local url ; local response ; local json
            [[ "$pkg" == "$1" ]] && echo "searching for $pkg" >&2
            [[ "$pkg" == "" ]] && echo "Error: No package name provided" >&2 && exit 1
            # Docs say pkg should be lowercase and we have had problems on the action runners
            url="https://api.nuget.org/v3-flatcontainer/${pkg,,}/index.json"
            if ! response="$( curl -s "$url" )" ; then
              echo -e "Problem while getting ${url}\n${response}" >&2
              exit 1
            fi
            if [[ "$response" == *"BlobNotFound"* ]] ; then
              echo -e "Could not find $pkg at $url\n$response" >&2
              return
            fi
            if [[ "$response" == *"Error"* ]] ; then
              echo -e "Problem while processing ${pkg} at ${url}:\n${response}\n" >&2
              exit 1
            fi
            if ! json="$(jq -c '[.versions|sort|to_entries[]|(.value)]' <<< "$response")" ; then
              echo -e "Problem while processing ${response}\n${json}\n" >&2
              exit 1
            fi
            echo "$json"
          }

          #
          # Find common values in a set of arrays
          #
          # Takes a single argument, namePrefix, being the non-numeric portion of the name a set of 
          # globally-scoped arrays, where the second portion of the name is sequential integers starting at 0.
          # e.g. array0, array 1...
          # NOTE: side effects!
          # The function puts values into an array called "common", which must be declared with global scope,
          # prior to calling.
          function findCommonElements() {
            local arrayPrefix="$1"
            declare -i i=0
            # Count how many arrays matching the format have entries in them
            while true ; do 
              echo "Looking for common elements in \`${arrayPrefix}${i}\`"
              declare var="${arrayPrefix}${i}[@]"
              declare -a array=( "${!var}" )
              [ "${#array}" -eq 0 ] && break 
              i=$((i+1))
            done
            arrayCount=$i
            echo "Found $arrayCount arrays"
            # Put all common entries into the "common" array (must exist in global scope)
            mapfile -d '' common < <(
              (for (( i=0 ; i<=arrayCount ; i++ )) ; do 
                declare var="${arrayPrefix}${i}[@]"
                declare -a array=( "${!var}" )
                printf %s\\0 "${array[@]}" 
              done) \
              | sort -zn \
              | uniq -zcd \
              | grep -z "^\ *$arrayCount" \
              | cut -zb9-
            )
          }

          function jsonifyArray() {
              local delim="" ; local json="[ " ; declare -a array
              mapfile -t array <<< "$@"
              #shellcheck disable=SC2128
              for element in $array ; do
                json="${json}${delim}\"${element}\""
                delim=", "
              done
              json="$json ]"
              echo "$json"
          }
          main "$@" ; exit $?

      - name: Determine Requirements
        id: requirements
        if: ${{ steps.nuget.outputs.continue == 'true' }}
        env:
          releasePrefix: ${{ inputs.releasePrefix }}
          ignoreReleases: ${{ inputs.ignoreReleases }}
          nugetVersionJson: ${{ steps.nuget.outputs.version_json }}
          githubReleaseJson: ${{ steps.github.outputs.release_json }}
        run: |
          #
          # From the above, prepare a list of releases that do not have all of the required packages
          echo "Retrieving data"
          if ! nugetVersions="$(echo "$nugetVersionJson" | jq -r '.[]')" ; then
            echo "Error: Failed to convert $nugetVersionJson into bash array: $nugetVersions"
            exit 1
          fi
          if ! githubReleases="$(echo "$githubReleaseJson" | jq -r '.[]')" ; then
            echo "Error: Failed to convert $githubReleaseJson into bash array: $githubReleases"
            exit 1
          fi
          declare -a nugetArray=()
          declare -a githubArray=()
          mapfile -t -d ' ' nugetArray <<< "$nugetVersions"
          mapfile -t -d ' ' githubArray <<< "$githubReleases"
          mapfile -t -d ' ' ignoreArray <<< "$ignoreReleases"

          echo "Determining requirements"
          #
          # Releases Needed should not include things that we have for every platform *i.e nugetArray*
          # nor should it include things that are ignored *i.e. ignoreReleases*
          releasesNeededJson="[ " ; releasesNeededJsonDelim=""
          #shellcheck disable=SC2128
          for release in $githubArray ; do           # DON'T use "${githubArray[@]}"
            found="false"
            #shellcheck disable=SC2128
            for version in $nugetArray ; do           # DON'T use "${nugetArray[@]}"
                if [[ "${version}" == "${release}" ]] ; then
                  found="true"
                  break
                fi
            done
            if [[ "$found" == "true" ]] ; then
              echo "Have ${release}"
            else
              echo -n "Potentially need ${release}... "
              ignore="false"
              for element in "${ignoreArray[@]}" ; do        # MUST use "${ignoreArray[@]}"
                if [[ "$element" == "$release" ]] ; then
                  echo "no, ignored."
                  ignore="true"
                  break
                fi
              done
              if [[ "$ignore" == "false" ]] ; then
                releasesNeededJson="${releasesNeededJson}${releasesNeededJsonDelim}\"${release}\""
                releasesNeededJsonDelim=", "
                echo "do need, added to the list."
              fi
            fi
          done
          releasesNeededJson="${releasesNeededJson} ]"

          echo "Writing output"
          if ! out="$( echo "$releasesNeededJson" | jq -c '[.[]]' )" ; then
            echo "Error: Failed to convert $releasesNeededJson into bash array: $out"
            echo "continue=false" >> "$GITHUB_OUTPUT"
          else
            echo "continue=true" >> "$GITHUB_OUTPUT"
          fi
          echo "releases_needed_json=${releasesNeededJson}" >> "$GITHUB_OUTPUT"
          echo -e "Releases needed: ${releasesNeededJson}"

      - name: Arrays
        id: arrays
        if: ${{ steps.requirements.outputs.continue == 'true' }}
        env:
          rids: ${{ inputs.rids }}
        run: |
          # Write out the RID list as JSON for use in the next step
          ridJson="[ " && ridJsonComma=""
          platformJson="[ " && platformJsonComma=""
          for rid in $rids ; do
            ridJson="${ridJson}${ridJsonComma}\"${rid}\""
            ridJsonComma=", "
            case "$rid" in
              "linux-x64") platform="ubuntu-latest" ;;
              "osx") platform="macos-latest" ;;
              "win-x64") platform="windows-latest" ;;
              *) platform="ubuntu-latest" ;;
            esac
            platformJson="${platformJson}${platformJsonComma}\"${platform}\""
            platformJsonComma=", "
          done
          ridArray="${ridArray} ]"
          platformArray="${platformArray} ]"
          #shellcheck disable=SC2129
          echo "ridArray=$ridJson" >> "$GITHUB_OUTPUT" # DEPRECATED - use rid_json
          echo "rid_json=$ridJson" >> "$GITHUB_OUTPUT"
          echo "platform_json=$platformJson" >> "$GITHUB_OUTPUT" 
          echo "platformArray=$platformJson" >> "$GITHUB_OUTPUT" # DEPRECATED - use platform_json
          #end
